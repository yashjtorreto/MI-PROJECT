# -*- coding: utf-8 -*-
"""ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GaS9sf42ikDlJzV1HpADrwGdH2aBuBWG
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import pickle
# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:                            
        print(os.path.join(dirname, filename))

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np 
import seaborn as sns
import matplotlib.pyplot as plt 
# %matplotlib inline
from sklearn.model_selection import train_test_split

data = pd.read_csv('Travel (1).csv')
data.head()

orginal = data.copy()

# Checking for null values 

data.isnull().sum()

plt.bar(data.Age, data.MonthlyIncome)

data.shape

plt.figure(figsize = (10,8))
sns.boxplot(y = data.Age)

fig,ax = plt.subplots(1,figsize=(17,3))
ax = sns.boxplot(data=data)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45)

plt.show()

sns.set(rc={'axes.facecolor':'cornflowerblue', 'figure.facecolor':'cornflowerblue'})

ax = sns.displot(data.MonthlyIncome, palette= 'rainbow', color = 'red', kde = True)

data.columns

nu = data.select_dtypes('number')
plt.figure(figsize = (10, 8))
sns.heatmap(nu.corr().round(2), annot = True, linewidth = 1, linecolor = 'black')

# Feature engineering 
data.head()

#data = data.drop(['CustomerID', 'MonthlyIncome'], axis = 1)
data.head()

cat = data.select_dtypes('object')
num = data.select_dtypes('number')

cat.head()
print(cat.shape)

num.head()
print(num.shape)

orginal.shape

cat.isnull().sum()

cat.head()

# lets impute the type of contact feataure now....
import warnings 
warnings.filterwarnings('ignore')

print(sns.countplot(cat.TypeofContact));

print(cat.TypeofContact.value_counts());

# Let's do frequent imputation for this.. 
cat.TypeofContact = cat.TypeofContact.fillna(cat.TypeofContact.value_counts().index[0])

cat.TypeofContact.value_counts()

# Lets transform the categorical data now ......  

cat.head()

cat.TypeofContact.value_counts()

# let to the frequently imputation 

dic = { 'Self Enquiry': 1, 'Company Invited': 0}
cat.TypeofContact = cat.TypeofContact.map(dic)

cat.Occupation.value_counts()

dic = { 'Salaried': 3, 'Small Business': 2, 'Large Business': 1, 'Free Lancer': 0 }

cat.Occupation = cat.Occupation.map(dic)

cat.head()

dic = { 'Female': 1, 'Male': 2}

cat.Gender = cat.Gender.map(dic)

cat.ProductPitched.value_counts()

dic = { 'Basic': 4, 'Deluxe': 3, 'Standard': 2, 'Super Deluxe': 1, 'King': 0}

cat.ProductPitched = cat.ProductPitched.map(dic)

cat.head()

cat.MaritalStatus.value_counts()

dic = { 'Married': 3, 'Divorced': 2, 'Single': 1, 'Unmarried': 0 }

cat.MaritalStatus = cat.MaritalStatus.map(dic)

cat.Designation.value_counts()

dic = { 'Executive': 4, 'Manager': 3, 'Senior Manager': 2, 'AVP': 1, 'VP': 0 }

cat.Designation = cat.Designation.map(dic)

cat.head()

cat.isnull().sum()

cat.Gender.isnull().sum()

sns.countplot(cat.Gender)

cat.Gender = cat.Gender.fillna(1.0)

cat.isnull().sum()

cat.head()

# lets do numerical now....

num.head()

num.isnull().sum()

plt.figure(figsize = (19, 8))
sns.countplot(num.Age)

num.Age.mean()

num.Age = num.Age.fillna(num.Age.mean())

plt.figure(figsize = (19, 8))
sns.countplot(num.DurationOfPitch)

num.DurationOfPitch.median()

num.DurationOfPitch = num.DurationOfPitch.fillna(num.DurationOfPitch.median())

num.isnull().sum()

plt.figure(figsize = (19, 8))
sns.countplot(num.NumberOfFollowups)

num.NumberOfFollowups = num.NumberOfFollowups.fillna(3.0)

plt.figure(figsize = (19, 8))
sns.countplot(num.PreferredPropertyStar)

num.PreferredPropertyStar = num.PreferredPropertyStar.fillna(4.0)

num.isnull().sum()

plt.figure(figsize = (19, 8))
sns.countplot(num.NumberOfTrips)

num.NumberOfTrips.mean()

num.NumberOfTrips = num.NumberOfTrips.fillna(3.0)

plt.figure(figsize = (19, 8))
sns.countplot(num.NumberOfChildrenVisiting)

num.NumberOfChildrenVisiting.mean()

num.NumberOfChildrenVisiting = num.NumberOfChildrenVisiting.fillna(1.0)

num.isnull().sum()

cat.head()

num.head()

Data_Good = pd.concat([num, cat], axis = 1)

Data_Good.head()

Data_Good.isnull().sum()

from sklearn.preprocessing import StandardScaler

x = Data_Good.drop(['MonthlyIncome', 'Age'], axis = 1)
y = orginal.MonthlyIncome

y = orginal.MonthlyIncome.fillna(orginal.MonthlyIncome.mean())

x.head()

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)

ss = StandardScaler()
X_train_ss = ss.fit_transform(X_train)
X_test_ss = ss.transform(X_test)

X_train_ss = pd.DataFrame(X_train_ss, columns = X_train.columns)

X_test_ss = pd.DataFrame(X_test_ss, columns = X_test.columns)

X_train_ss.CustomerID.plot()

X_train_ss.head()

X_train_ss.columns

# Age 
sns.regplot(X_train_ss.CustomerID, y_train, color = 'red', fit_reg = True, line_kws = {'color': 'yellow'});

# prodtaken
sns.regplot(X_train_ss.ProdTaken, y_train, color = 'green', line_kws = {'color': 'brown'})

# City Tier 
sns.regplot(X_train_ss.CityTier, y_train, color = 'red', fit_reg = True, line_kws = {'color': 'yellow'});

# DurationOfPitch
sns.regplot(X_train_ss.DurationOfPitch, y_train, color = 'red', fit_reg = True, line_kws = {'color': 'yellow'});

# NumberOfPersonVisiting
plt.figure(figsize = ( 10, 7))
sns.regplot(X_train_ss.NumberOfPersonVisiting, y_train, color = 'red', fit_reg = True, line_kws = {'color': 'yellow'});
plt.grid()

# NumberOfFollowups
sns.regplot(X_train_ss.NumberOfFollowups, y_train, color = 'red', fit_reg = True, line_kws = {'color': 'yellow'});

# Gender 

sns.regplot(X_train_ss.Gender, y_train, color = 'red', fit_reg = True, line_kws = {'color': 'yellow'});

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

info = []

def metrics(model, X_train_ss, y_train):
    m = model.fit(X_train_ss, y_train)
    m = m.predict(X_test_ss)
    print("The Predicted Variable is :", m )
    print('')
    print("R2_Score :", r2_score(y_test, m))
    print('')
    print("Mean Squarred Error :", mean_squared_error(y_test, m))
    print('')
    print('Mean Absoluter Error : ', mean_absolute_error(y_test, m))
    info.append([model, r2_score(y_test, m), mean_squared_error(y_test, m), mean_absolute_error(y_test, m)])

metrics(lr, X_train_ss, y_train)
pickle.dump(lr, open('travelo.pkl', 'wb'))
